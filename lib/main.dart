import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:markdown/markdown.dart' as md;
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter_highlight/flutter_highlight.dart';
import 'package:flutter_highlight/theme_map.dart';

// const String _notes = """
// # Basic Markdown Demo
// ---
// The Basic Markdown Demo shows the effect of the four Markdown extension sets
// on formatting basic and extended Markdown tags.

// ## Overview

// The Dart [markdown](https://pub.dev/packages/markdown) package parses Markdown
// into HTML. The flutter_markdown package builds on this package using the
// abstract syntax tree generated by the parser to make a tree of widgets instead
// of HTML elements.

// The markdown package supports the basic block and inline Markdown syntax
// specified in the original Markdown implementation as well as a few Markdown
// extensions. The markdown package uses extension sets to make extension
// management easy. There are four pre-defined extension sets; none, Common Mark,
// GitHub Flavored, and GitHub Web. The default extension set used by the
// flutter_markdown package is GitHub Flavored.

// The Basic Markdown Demo shows the effect each of the pre-defined extension sets
// has on a test Markdown document with basic and extended Markdown tags. Use the
// Extension Set dropdown menu to select an extension set and view the Markdown
// widget's output.

// ## Comments

// Since GitHub Flavored is the default extension set, it is the initial setting
// for the formatted Markdown view in the demo.
// """;
const String _notes = """
# Basic Markdown Demo
---
The Basic Markdown Demo shows the effect of the four Markdown extension sets
on formatting basic and extended Markdown tags.

## Overview

The Dart [markdown](https://pub.dev/packages/markdown) package parses Markdown
into HTML. The flutter_markdown package builds on this package using the
abstract syntax tree generated by the parser to make a tree of widgets instead
of HTML elements.

The markdown package supports the basic block and inline Markdown syntax
specified in the original Markdown implementation as well as a few Markdown
extensions. The markdown package uses extension sets to make extension
management easy. There are four pre-defined extension sets; none, Common Mark,
GitHub Flavored, and GitHub Web. The default extension set used by the
flutter_markdown package is GitHub Flavored.

The Basic Markdown Demo shows the effect each of the pre-defined extension sets
has on a test Markdown document with basic and extended Markdown tags. Use the
Extension Set dropdown menu to select an extension set and view the Markdown
widget's output.

## Comments

Since GitHub Flavored is the default extension set, it is the initial setting
for the formatted Markdown view in the demo.
""";

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a blue toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;
  String chat_str = '';

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  void _concatenateString(String str) {
    setState(() {
      chat_str += str;
    });
  }

  Future<int> sumStream(Stream<String> stream) async {
    var sum = 0;
    await for (final value in stream) {
      // _concatenateString(value.toString());
      sum += 1;
      _incrementCounter();
    }
    return sum;
  }

  Stream<String> countStream(int to) async* {
    final response =
        await rootBundle.loadString('assets/markdown_test_page.md');
      _concatenateString(response.toString());

    int i = 0;
    while (i < response.length) {
      await Future.delayed(
          const Duration(milliseconds: 1), () => print('Large Latte'));
      yield response[i];
      i++;
    }

    // final response1 =
    //     await rootBundle.loadString('assets/original_markdown_example_data.md');
    // int j = 0;
    // while (j < response1.length) {
    //   await Future.delayed(
    //       const Duration(milliseconds: 1), () => print('Large Latte'));
    //   yield response1[j];
    //   j++;
    // }

    // for (int i = 1; i <= to; i++) {
    //   await Future.delayed(
    //       const Duration(milliseconds : 100), () => print('Large Latte'));
    //   yield i;
    // }
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    sumStream(countStream(50));
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 1250),
          child: Column(
            // Column is also a layout widget. It takes a list of children and
            // arranges them vertically. By default, it sizes itself to fit its
            // children horizontally, and tries to be as tall as its parent.
            //
            // Column has various properties to control how it sizes itself and
            // how it positions its children. Here we use mainAxisAlignment to
            // center the children vertically; the main axis here is the vertical
            // axis because Columns are vertical (the cross axis would be
            // horizontal).
            //
            // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
            // action in the IDE, or press "p" in the console), to see the
            // wireframe for each widget.
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'You have pushed the button this many times',
              ),
              Text(
                '$_counter',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
              Expanded(
                child: Markdown(
                  key: Key('githubFlavored'),
                  data: chat_str,
                  imageDirectory: 'https://raw.githubusercontent.com',
                   builders: {'code': HighlightBuilder()},
                  extensionSet: md.ExtensionSet.gitHubFlavored,
                  // extensionSet: md.ExtensionSet([md.FencedCodeBlockSyntax()], []),
                  onTapLink: (String text, String? href, String title) =>
                      linkOnTapHandler(context, text, href, title),
                ),
              ),
            ],
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }

  // Handle the link. The [href] in the callback contains information
  // from the link. The url_launcher package or other similar package
  // can be used to execute the link.
  Future<void> linkOnTapHandler(
    BuildContext context,
    String text,
    String? href,
    String title,
  ) async {
    unawaited(showDialog<Widget>(
      context: context,
      builder: (BuildContext context) =>
          _createDialog(context, text, href, title),
    ));
  }

  Widget _createDialog(
          BuildContext context, String text, String? href, String title) =>
      AlertDialog(
        title: const Text('Reference Link'),
        content: SingleChildScrollView(
          child: ListBody(
            children: <Widget>[
              Text(
                'See the following link for more information:',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              const SizedBox(height: 8),
              Text(
                'Link text: $text',
                style: Theme.of(context).textTheme.bodyMedium,
              ),
              const SizedBox(height: 8),
              Text(
                'Link destination: $href',
                style: Theme.of(context).textTheme.bodyMedium,
              ),
              const SizedBox(height: 8),
              Text(
                'Link title: $title',
                style: Theme.of(context).textTheme.bodyMedium,
              ),
            ],
          ),
        ),
        actions: <Widget>[
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          )
        ],
      );
}

class HighlightBuilder extends MarkdownElementBuilder {
  @override
  Widget visitElementAfterWithContext(BuildContext context, md.Element element, TextStyle? preferredStyle, TextStyle? linkStyle) {
    if (element.attributes['class'] == null && !element.textContent.trim().contains('\n')) {
      
      return Container(
          padding: EdgeInsets.only(top: 0.0, right: 4.0, bottom: 1.75, left: 4.0),
          margin: EdgeInsets.symmetric(horizontal: 2.0),
          color: Colors.black12,
          child: Text(
              element.textContent,
              style: TextStyle(fontFamily: 'RobotoMono', fontSize: 12.0)));
    } else {
      var language = 'plaintext';
      final pattern = RegExp(r'^language-(.+)$');
      if (element.attributes['class'] != null && pattern.hasMatch(element.attributes['class']!)) {
        language = pattern.firstMatch(element.attributes['class']!)?.group(1) ?? 'plaintext';
      }
      return HighlightView(
        element.textContent.trim(),
        language: language,
        // theme: themeMap['a11y-dark']!,
        // theme: themeMap['github-gist']!,
        // theme: themeMap['atom-one-dark']!,
        theme: themeMap['vs2015']!,
        // theme: themeMap['dark']!,
        padding: EdgeInsets.all(12),
        // textStyle: TextStyle(fontFamily: 'RobotoMono', fontSize: 12),
        // textStyle: TextStyle(
        //           fontFamily:
        //               'SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace'),
        );
    }
  }
}